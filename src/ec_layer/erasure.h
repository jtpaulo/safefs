#ifndef __ERASURE_H__
#define __ERASURE_H__

#include <stdlib.h>

/**
 * Initialize the erasure module
 * @param k The number of data blocks to produce using erasure coding
 * @param m The number of parity blocks to produce using erasure coding
 */
void erasure_init(size_t k, size_t m);

/**
 * Frees all the data structures created during the lifetime of the module
 */
void erasure_destroy();

typedef struct encoded_file {
    /* Blocks generated by erasure coding */
    char **data_blocks;
    char **parity_blocks;
    /* METADATA */
    /* Block location */
    char **data_blocks_location;
    char **parity_blocks_location;
    /* Data size */
    size_t size;
    size_t fragment_size;
} encoded_file_t;

encoded_file_t *encoded_file_new();

void encoded_file_destroy(encoded_file_t *);

/**
 * Copies the content of an encoded_file_t object
 * @param file The record to copy from
 * @return Copy of the encoded_file
 */
encoded_file_t *encoded_file_copy(const encoded_file_t *file);

/**
 * Encodes the file and stores the result in a encoded_file_t structure
 * @param data The data to encode
 * @param size Size of the data to encode
 * @return The encoded data
 */
encoded_file_t *encode(const char *data, size_t size);

/**
 * Decodes data that previously encoded using the encode function
 * @param  encoded_data The data to decode
 * @return The decoded data
 */
char *decode(const encoded_file_t *encoded_data);

/**
 * Writes encoded blocks as separate files according to a given path, frees the
 * blocks stored in the structure and returns the number of bytes written.
 *
 * @param ef Encoded file
 * @param path Path of the original file to use as a pattern
 * @return The number of bytes written
 */
size_t dump_blocks(encoded_file_t *ef, const char *path);

/**
 * Reads encoded blocks from separate files, indicated by the locatio ones.
 * @param ef Encoded file
 * @return The number of bytes read
 */
size_t load_blocks(encoded_file_t *ef);
#endif /* __ERASURE_H__ */
